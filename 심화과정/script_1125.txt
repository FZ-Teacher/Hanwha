#-----------------------------------------------------------#
#seaborn 활용 시각화 연습
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

df = pd.DataFrame( {"x":[1,2,3,1,1], "y":[3,2,1,2,1]})
join1 = sns.jointplot(x="x", y="y", data=df);
join1.savefig("join1.png")

#-----------------------------------------------------------#
#tips 예제 데이터로 연습
plt.clf()

tips = sns.load_dataset('tips')
sns.set_style("whitegrid")
tips.head()

#box plot
sns.boxplot(x="day", y="total_bill", data=tips)
plt.show()

#box plot
sns.boxplot(x="day", y="total_bill", hue="smoker", data=tips)
plt.show()

#violin plot
iris = sns.load_dataset("iris")    
sns.violinplot(x=iris.species, y=iris.sepal_length, data=iris);
plt.savefig("violin.png")

#-----------------------------------------------------------#
#다른 예제 데이터
flights = sns.load_dataset("flights")
flights.head()

df = flights.pivot('month', 'year', 'passengers')
df.head()

#heatmap
sns.heatmap( df, annot=True, fmt="d")	#fmt='d' 정수형태로 수치 입력
plt.show()

#heatmap+pandas
df.style.background_gradient(cmap='summer')

#heatmap+corr
corr=iris.corr()
corr
sns.heatmap(corr, annot=True)

#jointplot
sns.jointplot(x="total_bill", y="tip", data=tips, kind="reg");
plt.savefig('join3.png')


#pair plot
sns.set(style="ticks")
iris = sns.load_dataset("iris")
iris.head(10)

sns.pairplot(iris, hue="species")
plt.show()

#-----------------------------------------------------------#
#lm plot
sns.set_style("darkgrid")
sns.lmplot( x="total_bill", y="tip", data=tips, size=7)
plt.show()

#lm plot
sns.set_style("darkgrid")
sns.lmplot( x="total_bill", y="tip", data=tips, hue="smoker", size=7)
plt.show()

#lm plot
sns.set_style("darkgrid")
sns.lmplot( x="total_bill", y="tip", data=tips, hue="time", size=7)
plt.show()

#logistic regression 결과, binary 표시(20%기준)
tips['big_tip'] = tips['tip']/tips['total_bill'] >= 0.2
sns.lmplot(x="total_bill", y="big_tip", data=tips,logistic=True, y_jitter=.03);
plt.savefig("tiplogit.png")

#-----------------------------------------------------------#
#line plot
fmri = sns.load_dataset("fmri")
fmri.head()

sns.lineplot(x="timepoint", y="signal", data=fmri)
sns.lineplot(x="timepoint", y="signal", hue="event", style="event", markers=True, data=fmri)

#-----------------------------------------------------------#
# flask on python anywhere
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello from Flask!'

@app.route('/item/<code>')
def item(code):
    return "<h1> %s </h1>" % code

#-----------------------------------------------------------#
# dash on colab

%%sh
pip install -q dash
pip install -q dash_core_components
pip install -q dash_html_components
pip install -q dash_table

%%sh
# get ngrok
curl -O https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
unzip ngrok-stable-linux-amd64.zip

%%writefile dash_app.py

import dash
import dash_core_components as dcc
import dash_html_components as html

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__)#, external_stylesheets=external_stylesheets)

app.layout = html.Div(children=[
    html.H1(children='Hello Dash'),

    html.Div(children='''
        Dash: A web application framework for Python.
    '''),

    dcc.Graph(
        id='example-graph',
        figure={
            'data': [
                {'x': [1, 2, 3], 'y': [4, 1, 2], 'type': 'bar', 'name': 'SF'},
                {'x': [1, 2, 3], 'y': [2, 4, 5], 'type': 'bar', 'name': u'Montréal'},
            ],
            'layout': {
                'title': 'Dash Data Visualization'
            }
        }
    )
])

if __name__ == '__main__':
    app.run_server(debug=True)

# launch ngrok
get_ipython().system_raw('./ngrok http 8050 &')

%%sh
# get url with ngrok
curl -s http://localhost:4040/api/tunnels | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])"

!python dash_app.py